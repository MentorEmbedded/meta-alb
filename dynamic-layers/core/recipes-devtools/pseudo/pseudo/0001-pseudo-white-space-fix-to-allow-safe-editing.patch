From b1c4771a71ad56fcd1c09d77934a5b37d5b4529c Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Tue, 19 Jan 2021 16:26:12 +0100
Subject: [PATCH 1/4] pseudo: white space fix to allow safe editing

White space in pseudo_exec_path() was a weird mix of tabs and spaces.
Given the amount of conditionals, breaking things would be even more
risky when editing "as is". So we fix things first

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
---
 pseudo_client.c | 40 ++++++++++++++++++++--------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/pseudo_client.c b/pseudo_client.c
index a590677..7bd8eae 100644
--- a/pseudo_client.c
+++ b/pseudo_client.c
@@ -2469,14 +2469,14 @@ static int exec_chroot_scriptcheck(const char **filenamep, char * const**argvp,
 
 const char *
 pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
-    const char *filename = *filenamep;
-    char *s;
-    char *path = getenv("PATH");
+	const char *filename = *filenamep;
+	char *s;
+	char *path = getenv("PATH");
 	const char *candidate;
 	int i;
-    int checkscript;
+	int checkscript;
 	int forcechroot = 0;
-    int pforcechroot = 0;
+	int pforcechroot = 0;
 	char aliasbuf[NAME_MAX];
 	char *xtranslation = getenv("PSEUDO_CHROOT_XTRANSLATION");
 
@@ -2523,7 +2523,7 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 		if (forcechroot)
 			candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 		else
-            candidate = pseudo_fix_path(NULL, filename, 0, 0, NULL, 0, readlink_chroot);            
+			candidate = pseudo_fix_path(NULL, filename, 0, 0, NULL, 0, readlink_chroot);
 
         if (pseudo_chroot_len) {
 			checkscript = exec_chroot_scriptcheck(filenamep, argvp, filename, candidate);
@@ -2541,9 +2541,9 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 		if (forcechroot)
 			candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 		else
-            candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);            
+			candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);
 
-        if (pseudo_chroot_len) {
+		if (pseudo_chroot_len) {
 			checkscript = exec_chroot_scriptcheck(filenamep, argvp, filename, candidate);
 			if (checkscript) {
 				pseudo_magic();
@@ -2570,26 +2570,26 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 		     !patternlistmatchespath(getenv("PSEUDO_CHROOT_EXCEPTIONS"), path, NULL, 0, 0)))
 			pforcechroot = 1;
 		pseudo_debug(PDBGF_CLIENT, "exec_path: checking %s for %s %s %s\n", path, filename, (forcechroot) ? "(chroot)" : "", (pforcechroot) ? "(pchroot)" : "");
-        if (!*path || (*path == '.' && path_lens[i] == 1)) {
+		if (!*path || (*path == '.' && path_lens[i] == 1)) {
 			/* empty path or . is cwd */
 			if (forcechroot)
-                candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
+				candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 			else
-                candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);
+				candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);
 			pseudo_debug(PDBGF_CLIENT, "exec_path: in cwd, got %s\n", candidate);
 		} else if (*path == '/') {
 			if (forcechroot || pforcechroot) {
 				char *dir = pseudo_root_path(__func__, __LINE__, AT_FDCWD, path, 0);
 				if (dir)
-				    candidate = pseudo_fix_path(dir, filename, 0, strlen(dir), NULL, 0, readlink_chroot);
-                else {
+					candidate = pseudo_fix_path(dir, filename, 0, strlen(dir), NULL, 0, readlink_chroot);
+				else {
 					pseudo_diag("couldn't allocate intermediate path.\n");
 					candidate = NULL;
 				}
 			}
 			else
-			    candidate = pseudo_fix_path(path, filename, 0, path_lens[i], NULL, 0, readlink_chroot);
-            pseudo_debug(PDBGF_CLIENT, "exec_path: got %s\n", candidate);
+				candidate = pseudo_fix_path(path, filename, 0, path_lens[i], NULL, 0, readlink_chroot);
+			pseudo_debug(PDBGF_CLIENT, "exec_path: got %s\n", candidate);
 		} else {
 			/* oh you jerk, making me do extra work */
 			size_t len;
@@ -2601,17 +2601,17 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 			}
 			else
 			    dir = pseudo_fix_path(pseudo_cwd, path, 0, pseudo_cwd_len, &len, 0, readlink_chroot);
-            if (dir) {
-                candidate = pseudo_fix_path(dir, filename, 0, len, NULL, 0, readlink_chroot);
+			if (dir) {
+				candidate = pseudo_fix_path(dir, filename, 0, len, NULL, 0, readlink_chroot);
 				pseudo_debug(PDBGF_CLIENT, "exec_path: got %s for non-absolute path\n", candidate);
 			} else {
 				pseudo_diag("couldn't allocate intermediate path.\n");
 				candidate = NULL;
 			}
 		}
-        if (pseudo_chroot_len) {
+		if (pseudo_chroot_len) {
 			char *fullpath = malloc(strlen(path) + 1 + strlen(filename) + 1);
-			
+
 			if(!fullpath) {
 				pseudo_diag("couldn't allocate intermediate full path.\n");
 				return -1;
@@ -2636,7 +2636,7 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 	candidate = filename;
 	if (candidate && forcechroot)
 		candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, candidate, 0);
-    if (pseudo_chroot_len) {
+	if (pseudo_chroot_len) {
 		checkscript = exec_chroot_scriptcheck(filenamep, argvp, filename, candidate);
 		if (checkscript) {
 			pseudo_magic();
-- 
2.17.1

