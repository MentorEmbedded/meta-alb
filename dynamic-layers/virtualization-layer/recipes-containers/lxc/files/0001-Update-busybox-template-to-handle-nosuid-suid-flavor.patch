From 50bb487042b9f77deae2bae31b2ade25eb35fd54 Mon Sep 17 00:00:00 2001
From: Ionut-Valentin Vicovan <Ionut.Vicovan@nxp.com>
Date: Mon, 6 Apr 2020 09:46:34 +0300
Subject: [PATCH] Update busybox template to handle nosuid/suid flavors of
 busybox

By default the template handles only the case when there is only
one binary named "busybox", and creates command links for the
builtin applets.
There is also the case when busybox is split into two binaries,
"busybox.nosuid" and "busybox.suid".
Each of the two binaries contain a subset of the applets enabled
by the busybox global configuration. "busybox" is in this case
a link to one of them (usually "busybox.nosuid"), therefore
the original behavior of the template script would skip creation
of some very important command links which refer to applets
built into the suid binary (e.g. login, mount, passwd, su).

Signed-off-by: Vicovan Ionut-Valentin <Ionut.Vicovan@nxp.com>
Signed-off-by: Catalin Udma <catalin-dan.udma@nxp.com>
Signed-off-by: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
---
 templates/lxc-busybox.in | 106 ++++++++++++++++++++++++++-------------
 1 file changed, 70 insertions(+), 36 deletions(-)

diff --git a/templates/lxc-busybox.in b/templates/lxc-busybox.in
index 761e5dd..2e836ee 100644
--- a/templates/lxc-busybox.in
+++ b/templates/lxc-busybox.in
@@ -51,7 +51,6 @@ USERNS="$(in_userns)"
 install_busybox()
 {
   rootfs="${1}"
-  name="${2}"
   res=0
   fstree="\
 ${rootfs}/selinux \
@@ -133,13 +132,7 @@ EOF
   # writable and readable for other
   chmod 644 "${rootfs}/etc/inittab" || return 1
 
-  # Look for the pathname of "default.script" from the help of udhcpc
-  DEF_SCRIPT=`${BUSYBOX_EXE} udhcpc -h 2>&1 | grep -- '-s,--script PROG' | cut -d'/' -f2- | cut -d')' -f1`
-  DEF_SCRIPT_DIR=`dirname /${DEF_SCRIPT}`
-  mkdir -p ${rootfs}/${DEF_SCRIPT_DIR}
-  chmod 644 ${rootfs}/${DEF_SCRIPT_DIR} || return 1
-
-  cat <<EOF >> ${rootfs}/${DEF_SCRIPT}
+  cat <<EOF >> ${rootfs}/usr/share/udhcpc/default.script
 #!/bin/sh
 case "\$1" in
   deconfig)
@@ -176,7 +169,7 @@ esac
 exit 0
 EOF
 
- chmod 744 ${rootfs}/${DEF_SCRIPT}
+ chmod 744 ${rootfs}/usr/share/udhcpc/default.script
 
  return "${res}"
 }
@@ -184,40 +177,53 @@ EOF
 configure_busybox()
 {
   rootfs="${1}"
+  bb_binary="${2}"
+  has_init=""
 
-  # copy busybox in the rootfs
-  if ! cp "${BUSYBOX_EXE}" "${rootfs}/bin"; then
-    echo "ERROR: Failed to copy busybox binary" 1>&2
-    return 1
-  fi
+  which ${bb_binary} >/dev/null 2>&1
 
-  # copy host passwd
-  if ! cp "$(which passwd)" "${rootfs}/bin"; then
-      echo "ERROR: Failed to copy passwd binary"
-      return 1
+  if [ $? -ne 0 ]; then
+    echo "${bb_binary} executable is not accessible"
   fi
 
-  # copy bash binary as the container init
-  if ! cp "$(which bash)" "${rootfs}/sbin/init"; then
-      echo "ERROR: Failed to copy bash binary"
-      return 1
+  bbpath=`which ${bb_binary}`
+  # copy busybox in the rootfs
+  if ! cp $bbpath "${rootfs}/bin"; then
+    echo "ERROR: Failed to copy ${bb_binary} binary" 1>&2
+    return 1
   fi
 
-
   # symlink busybox for the commands it supports
   # it would be nice to just use "chroot $rootfs busybox --install -s /bin"
   # but that only works right in a chroot with busybox >= 1.19.0
-  (
-    cd "${rootfs}/bin" || return 1
-    ./busybox --list | grep -v busybox | xargs -n1 ln -s busybox
-  )
+  pushd ${rootfs}/bin > /dev/null || return 1
+  cd "${rootfs}/bin" || return 1
+  ./${bb_binary} --help | grep 'Currently defined functions:' -A300 | \
+  grep -v 'Currently defined functions:' | tr , '\n' | \
+  xargs -n1 ln -s ${bb_binary}
+
+  has_init=`./${bb_binary} --help | grep 'Currently defined functions:' -A300 | grep init`
+  if [ -n "$has_init" ]; then
+    # relink /sbin/init
+    ln ${rootfs}/bin/${bb_binary} ${rootfs}/sbin/init
+  fi
+  popd > /dev/null
 
-  # /etc/fstab must exist for "mount -a"
-  touch "${rootfs}/etc/fstab"
+  if [ ! -f "${rootfs}/etc/fstab" ]; then
+    # /etc/fstab must exist for "mount -a"
+    touch "${rootfs}/etc/fstab"
+  fi
+
+  if [ ! -x "${rootfs}/bin/passwd" -a -f "${rootfs}/bin/passwd" ]; then
+    # passwd exec must be setuid
+    chmod +s "${rootfs}/bin/passwd"
+  fi
 
-  # passwd exec must be setuid
-  chmod +s "${rootfs}/bin/passwd"
-  touch "${rootfs}/etc/shadow"
+  if [ ! -f "${rootfs}/etc/shadow" ]; then
+    touch "${rootfs}/etc/shadow"
+    # add empty password for root
+    echo "root::16631:0:99999:7:::" >> ${rootfs}/etc/shadow
+  fi
 
   return 0
 }
@@ -344,14 +350,42 @@ if [ -z "$rootfs" ]; then
   fi
 fi
 
-if ! install_busybox "${rootfs}" "${name}"; then
+if ! install_busybox "${rootfs}"; then
   echo "ERROR: Failed to install rootfs" 1>&2
   exit 1
 fi
 
-if ! configure_busybox "${rootfs}"; then
-  echo "ERROR: Failed to configure busybox" 1>&2
-  exit 1
+bb_configured=0
+
+# do we have nosuid/suid binaries?
+bb_binary=`which busybox.nosuid`
+if [ -f "$bb_binary" ]; then
+  configure_busybox $rootfs busybox.nosuid
+  if [ $? -ne 0 ]; then
+    echo "failed to configure busybox.nosuid template"
+    exit 1
+  fi
+  # create a link named busybox
+  cd $rootfs/bin && ln -s $bb_binary busybox && cd -
+  bb_configured=1
+fi
+bb_binary=`which busybox.suid`
+if [ -f "$bb_binary" ]; then
+  configure_busybox $rootfs busybox.suid
+  if [ $? -ne 0 ]; then
+    echo "failed to configure busybox.suid template"
+    exit 1
+  fi
+  bb_configured=1
+fi
+
+# otherwise use the default busybox binary or link
+if [ $bb_configured -eq 0 ]; then
+  configure_busybox $rootfs busybox
+  if [ $? -ne 0 ]; then
+    echo "failed to configure busybox template"
+	exit 1
+  fi
 fi
 
 if ! copy_configuration "${path}" "${rootfs}" "${name}"; then
-- 
2.17.1

