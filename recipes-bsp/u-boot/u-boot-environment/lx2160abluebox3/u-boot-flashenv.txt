#
# This is the default NOR flash environment shipped for the LX2 side of the BlueBox3
#
#----------------------------------------------------------------------
# The following macros with angle brackets will be automagically
# replaced when building the binary environment:
#       <fdt_name>      Basename of KERNEL_DEVICETREE
#       <kernel_name>   UBOOT_KERNEL_IMAGETYPE if it has been set,
#                       otherwise KERNEL_IMAGETYPE
#       <machine>       MACHINE
#----------------------------------------------------------------------
#
BOARD=<machine>
arch=arm
baudrate=115200
boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; env exists secureboot && load ${devtype} ${devnum}:${distro_bootpart} ${scripthdraddr} ${prefix}${boot_script_hdr} && esbc_validate ${scripthdraddr};source ${scriptaddr}
boot_efi_binary=if fdt addr ${fdt_addr_r}; then bootefi bootmgr ${fdt_addr_r};else bootefi bootmgr ${fdtcontroladdr};fi;load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r};else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi
boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
boot_itblinux=load ${devtype} ${devnum}:${distro_bootpart} $load_addr ${prefix}${boot_itbname} && run bootargs_itblinux && bootm $load_addr -
boot_xspiitblinux=sf probe 0:0 && sf read $load_addr $kernel_start $kernel_size ; env exists secureboot && sf read $kernelheader_addr_r $kernelheader_start $kernelheader_size && esbc_validate ${kernelheader_addr_r}; run bootargs_itblinux && bootm $load_addr
boot_net_usb_start=usb start
boot_pci_enum=pci enum
boot_prefixes=/ /boot/
boot_itbname=kernel.itb
boot_script_dhcp=boot.scr.uimg
boot_script_hdr=hdr_lx2160bluebox3_bs.out
boot_scripts=lx2160bluebox3_boot.scr
boot_syslinux_conf=extlinux/extlinux.conf
boot_targets=mmc0 usb0 nvme0 mmc1
bootargs_itblinux=run rootdev_${target} && run setbootargs && fsl_mc lazyapply dpl 0 && fsl_mc apply dpl 80d00000
bootcmd=run rootdev_xspi && run setbootargs; run distro_bootcmd;run xspi_itblinux_bootcmd; env exists secureboot && esbc_halt;
bootcmd_dhcp=run boot_net_usb_start; run boot_pci_enum; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi;setenv efi_fdtfile ${fdtfile}; setenv efi_old_vci ${bootp_vci};setenv efi_old_arch ${bootp_arch};setenv bootp_vci PXEClient:Arch:00011:UNDI:003000;setenv bootp_arch 0xb;if dhcp ${kernel_addr_r}; then tftpboot ${fdt_addr_r} dtb/${efi_fdtfile};if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r}; else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi;fi;setenv bootp_vci ${efi_old_vci};setenv bootp_arch ${efi_old_arch};setenv efi_fdtfile;setenv efi_old_arch;setenv efi_old_vci;
bootcmd_mmc0=devnum=0; run mmc_boot
bootcmd_mmc1=devnum=1; run mmc_boot
bootcmd_nvme0=devnum=0; run nvme_boot
bootcmd_usb0=devnum=0; run usb_boot
bootdelay=3
consoledev=ttyAMA0
cpu=armv8
distro_bootcmd=setenv nvme_need_init; nvme_need_init=true; for target in ${boot_targets}; do run bootcmd_${target}; done
efi_dtb_prefixes=/ /dtb/ /dtb/current/
ethact=DPMAC5@usxgmii
ethprime=DPMAC5@usxgmii
fdt_addr=0x64f00000
fdt_addr_r=0x90000000
fdt_high=0xa0000000
fdtcontroladdr=fbb30f00
fdtheader_addr_r=0x80100000
hwconfig=fsl_ddr:bank_intlv=auto
initrd_high=0xffffffffffffffff
kernel_addr_r=0x81000000
kernel_addr_sd=0x8000
kernel_name=kernel.itb
kernel_size=0x2800000
kernel_size_sd=0x1d000
kernel_start=0x1000000
kernelhdr_addr_sd=0x3000
kernelhdr_size_sd=0x20
kernelheader_addr_r=0x80200000
kernelheader_size=0x40000
kernelheader_start=0x600000
load_addr=0xa0000000
load_efi_dtb=load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}
mcmemsize=0x70000000
mcinitcmd=run setrcwdev && run mcinitcmd_${rcwdev} && fsl_mc start mc 0x80a00000 0x80e00000 && fsl_mc lazyapply dpl 0x80d00000
mcinitcmd_mmc=mmc read 0x80a00000 0x5000 0x1800 && mmc read 0x80e00000 0x7000 0x800 && mmc read 0x80d00000 0x6800 0x800
mcinitcmd_xspi=sf probe 0:0 && sf read 0x80a00000 0xa00000 0x300000 && sf read 0x80e00000 0xe00000 0x100000 && sf read 0x80d00000 0xd00000 0x100000
mmc_boot=if mmc dev ${devnum}; then devtype=mmc; run scan_dev_for_boot_part; fi
nvme_boot=run nvme_init; if nvme dev ${devnum}; then devtype=nvme; run scan_dev_for_boot_part; fi
nvme_init=if ${nvme_need_init}; then nvme_need_init=false; nvme scan; fi
ramdisk_addr=0x800000
ramdisk_size=0x2000000
rootdev_mmc0=setenv rootdev mmcblk0p${distro_bootpart} noinitrd
rootdev_mmc1=setenv rootdev mmcblk1p${distro_bootpart} noinitrd
rootdev_nvme0=setenv rootdev nvme0n1p${distro_bootpart} noinitrd
rootdev_usb0=setenv rootdev sdb${distro_bootpart} noinitrd
rootdev_xspi=setenv rootdev ram0 ramdisk_size=0x2000000
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; run scan_dev_for_itblinux; done;run scan_dev_for_efi;
scan_dev_for_boot_part=part list ${devtype} ${devnum} devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done
scan_dev_for_efi=setenv efi_fdtfile ${fdtfile}; for prefix in ${efi_dtb_prefixes}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then run load_efi_dtb; fi;done;if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then echo Found EFI removable media binary efi/boot/bootaa64.efi; run boot_efi_binary; echo EFI LOAD FAILED: continuing...; fi; setenv efi_fdtfile
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then echo Found ${prefix}${boot_syslinux_conf}; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_itblinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_itbname}; then echo Found ${prefix}${boot_itbname}; run boot_itblinux; echo Booting ${boot_itbname} FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
setbootargs=setenv bootargs console=$consoledev,$baudrate earlycon=pl011,mmio32,0x21c0000 default_hugepagesz=1024m hugepagesz=1024m hugepages=2 pci=pcie_bus_perf root=/dev/$rootdev ${bootargs_extra} ${bootargs_debug}
setrcwdev=if itest.b *1e00003 -eq 0x07; then setenv rcwdev xspi; else setenv rcwdev mmc; fi
scriptaddr=0x80000000
scripthdraddr=0x80080000
soc=fsl-layerscape
stderr=serial_pl01x
stdin=serial_pl01x
stdout=serial_pl01x
usb_boot=usb start; if usb dev ${devnum}; then devtype=usb; run scan_dev_for_boot_part; fi
vendor=freescale
xspi_itblinux_bootcmd=echo Trying to load kernel.itb from flexspi..; devtype=xspi; target=xspi; run boot_xspiitblinux
